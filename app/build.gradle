plugins {
    id 'com.android.application'
}
import com.android.build.OutputFile
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def storePath = properties.getProperty('keyStorePath')
def alias = properties.getProperty('keyAlias')
def storePwd = properties.getProperty('keyStorePwd')
def aliasPwd = properties.getProperty('keyAliasPwd')
def enableSeparateBuildPerCPUArchitecture = true
def applicationName = "chat"
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}
android {
//    signingConfigs {
//        release {
//            //storeFile file(storePath)
//            storeFile file("key.jks")
//            keyAlias alias
//            storePassword storePwd
//            keyPassword aliasPwd
//        }
//        debug {
//            //storeFile file(storePath)
//            storeFile file("key.jks")
//            keyAlias alias
//            storePassword storePwd
//            keyPassword aliasPwd
//        }
//    }
    namespace 'com.chat'
    compileSdk 33
    defaultConfig {
        applicationId "com.chat"
        minSdk 27
        targetSdk 33
        versionCode 33
        versionName "2.4.4"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk true  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }
    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
////            signingConfig signingConfigs.release
//            multiDexEnabled true
//        }
    }
    applicationVariants.configureEach {
        variant ->
        variant.outputs.each {
            output ->
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi == null) {  // null for the universal-debug, universal-release variants
                output.outputFileName =
                        "${applicationName}-v${defaultConfig.versionName}-universal.apk"
            } else {
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
                output.outputFileName =
                        "${applicationName}-v${defaultConfig.versionName}-${abi}.apk"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.10'
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
    implementation 'com.alibaba:fastjson:2.0.25'
}